const asyncHandler = require('express-async-handler');
const Progress = require('../models/Progress');
const Course = require('../models/Course');

// Enroll student in a course
const enrollCourse = asyncHandler(async (req, res) => {
Â  const studentId = req.user._id;
Â  const courseId = req.params.courseId;

Â  // 1. Check if already enrolled
Â  const exists = await Progress.findOne({ student: studentId, course: courseId });
Â  if (exists) return res.status(400).json({ message: 'Already enrolled' });

Â  const course = await Course.findById(courseId);
Â  if (!course) return res.status(404).json({ message: 'Course not found' });

Â  // -------------------------------------------------------------
Â  // ðŸŽ¯ NEW LOGIC: PREREQUISITE COURSE CHECK
Â  // -------------------------------------------------------------
Â  if (course.prerequisiteCourse) {
Â  Â  const prereqId = String(course.prerequisiteCourse);
Â  Â  
Â  Â  // Get progress for the prerequisite course
Â  Â  const prereqProgress = await Progress.findOne({
Â  Â  Â  student: studentId,
Â  Â  Â  course: prereqId
Â  Â  });
Â  Â  
Â  Â  if (!prereqProgress) {
Â  Â  Â  // Fetch title of the prerequisite course for a friendly error message
Â  Â  Â  const prereqDetails = await Course.findById(prereqId, 'title');
Â  Â  Â  return res.status(403).json({ 
Â  Â  Â  Â  message: `Enrollment denied. You must first complete the prerequisite course: "${prereqDetails ? prereqDetails.title : 'Prerequisite Course'}"` 
Â  Â  Â  });
Â  Â  }

Â  Â  // Check if ALL modules across ALL levels of the prerequisite course are completed/passed
Â  Â  const allModulesCompleted = prereqProgress.levels.every(level => 
Â  Â  Â  level.modules.every(mod => mod.completed || mod.passed)
Â  Â  );

Â  Â  if (!allModulesCompleted) {
Â  Â  Â  const prereqDetails = await Course.findById(prereqId, 'title');
Â  Â  Â  return res.status(403).json({ 
Â  Â  Â  Â  message: `Enrollment denied. You must complete all modules in the prerequisite course: "${prereqDetails ? prereqDetails.title : 'Prerequisite Course'}"` 
Â  Â  Â  });
Â  Â  }
Â  }
Â  // -------------------------------------------------------------

Â  // Initialize progress 
Â  const levels = course.levels.map(level => ({
Â  Â  levelId: level._id,
Â  Â  modules: level.modules.map(mod => ({ 
Â  Â  Â  Â  moduleId: mod._id, 
Â  Â  Â  Â  completed: false, 
Â  Â  Â  Â  passed: false, 
Â  Â  Â  Â  score: 0, Â  Â  Â 
Â  Â  Â  Â  lastAttempt: undefined 
Â  Â  }))
Â  }));

Â  const progress = await Progress.create({ student: studentId, course: courseId, levels });
Â  res.status(201).json(progress);
});

// Get all enrolled courses for student
const getMyCourses = asyncHandler(async (req, res) => {
Â  const studentId = req.user._id;
Â  const progresses = await Progress.find({ student: studentId })
Â  Â  .populate('course', 'title description levels');
Â  res.json(progresses);
});

// Get single course progress
const getCourseProgress = asyncHandler(async (req, res) => {
Â  const studentId = req.user._id;
Â  const courseId = req.params.courseId;
Â  const progress = await Progress.findOne({ student: studentId, course: courseId })
Â  Â  .populate('course', 'title description levels');
Â  if (!progress) return res.status(404).json({ message: 'Not enrolled' });
Â  res.json(progress);
});

// Mark module as completed (for non-quiz/non-coding modules)
const completeModule = asyncHandler(async (req, res) => {
Â  const studentId = req.user._id;
Â  const { courseId, levelId, moduleId } = req.params;

Â  // 1. Fetch Course and Progress
Â  const course = await Course.findById(courseId);
Â  if (!course) return res.status(404).json({ message: 'Course not found' });

Â  const progress = await Progress.findOne({ student: studentId, course: courseId });
Â  if (!progress) return res.status(404).json({ message: 'Not enrolled' });

Â  // 2. Find relevant structures in both documents
Â  const courseLevel = course.levels.id(levelId);
Â  if (!courseLevel) return res.status(404).json({ message: 'Level not found in course' });
Â  
Â  const levelProgress = progress.levels.find(l => String(l.levelId) === levelId);
Â  if (!levelProgress) return res.status(404).json({ message: 'Level not found in progress' });

Â  const moduleIndex = levelProgress.modules.findIndex(m => String(m.moduleId) === moduleId);
Â  if (moduleIndex === -1) return res.status(404).json({ message: 'Module not found in progress' });

Â  const courseModuleIndex = courseLevel.modules.findIndex(m => String(m._id) === moduleId);
Â  if (courseModuleIndex === -1) return res.status(404).json({ message: 'Module not found in course structure' });
Â  
Â  // -------------------------------------------------------------
Â  // ðŸŽ¯ EXISTING LOGIC: SEQUENTIAL MODULE ACCESS CHECK
Â  // -------------------------------------------------------------
Â  if (courseModuleIndex > 0) {
Â  Â  // Get the details of the preceding module from the course structure
Â  Â  const prerequisiteModule = courseLevel.modules[courseModuleIndex - 1];
Â  Â  
Â  Â  // Get the student's progress for the prerequisite module
Â  Â  const prerequisiteProgress = levelProgress.modules.find(
Â  Â  Â  m => String(m.moduleId) === String(prerequisiteModule._id)
Â  Â  );

Â  Â  // Check if the prerequisite module is completed OR passed (important for quizzes)
Â  Â  const isPrereqComplete = prerequisiteProgress && 
Â  Â  Â  (prerequisiteProgress.completed || prerequisiteProgress.passed);

Â  Â  if (!isPrereqComplete) {
Â  Â  Â  return res.status(403).json({ 
Â  Â  Â  Â  message: `Access denied. Please complete the previous module: "${prerequisiteModule.title}"` 
Â  Â  Â  });
Â  Â  }
Â  }
Â  
Â  // If the module is already marked complete, return the progress
Â  if (levelProgress.modules[moduleIndex].completed) {
Â  Â  return res.json(progress);
Â  }

Â  // --- Existing Completion Logic (Video/Resource validation) ---
Â  const { playedRanges, duration, playedSeconds } = req.body || {};

Â  if (Array.isArray(playedRanges) && duration) {
Â  Â  // Merge ranges and compute covered seconds
Â  Â  const sorted = playedRanges
Â  Â  Â  .map(r => ({ start: Number(r.start || r.s || 0), end: Number(r.end || r.e || 0) }))
Â  Â  Â  .filter(r => r.end > r.start)
Â  Â  Â  .sort((a, b) => a.start - b.start);

Â  Â  let merged = [];
Â  Â  for (const r of sorted) {
Â  Â  Â  if (!merged.length) merged.push(r);
Â  Â  Â  else {
Â  Â  Â  Â  const last = merged[merged.length - 1];
Â  Â  Â  Â  if (r.start <= last.end + 0.5) { // small gap tolerance
Â  Â  Â  Â  Â  last.end = Math.max(last.end, r.end);
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  merged.push(r);
Â  Â  Â  Â  }
Â  Â  Â  }
Â  Â  }

Â  Â  const covered = merged.reduce((sum, r) => sum + Math.max(0, r.end - r.start), 0);
Â  Â  const dur = Number(duration) || 0;
Â  Â  const percent = dur > 0 ? covered / dur : 0;

Â  Â  const THRESHOLD = 0.9; // require 90% coverage
Â  Â  if (percent < THRESHOLD) {
Â  Â  Â  return res.status(400).json({ message: `Watched only ${(percent * 100).toFixed(0)}% (required ${THRESHOLD * 100}%)` });
Â  Â  }

Â  Â  // store evidence
Â  Â  levelProgress.modules[moduleIndex].evidence = { playedRanges: merged, duration: dur, playedSeconds: Number(playedSeconds) || covered };
Â  }

Â  // Complete current module
Â  levelProgress.modules[moduleIndex].completed = true;
Â  levelProgress.modules[moduleIndex].completedAt = new Date();

Â  progress.markModified('levels');
Â  await progress.save();
Â  res.json(progress);
});

module.exports = {
Â  enrollCourse,
Â  getMyCourses,
Â  getCourseProgress,
Â  completeModule
};