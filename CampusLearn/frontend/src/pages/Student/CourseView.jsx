import React, { useEffect, useState, useCallback } from 'react';
import { useParams } from 'react-router-dom';
import { useSelector } from 'react-redux';
import progressApi from '../../api/progressApi';
import ModuleCard from '../../components/ModuleCard';
import CodingLinks from '../../components/CodingLinks';

// --- THEME CONSTANTS ---
const PRIMARY_COLOR = '#473E7A'; // MongoDB Purple
const SOFT_BORDER_COLOR = '#EBEBEB'; 
const SOFT_BACKGROUND = '#F8F8F8'; 
const WHITE = '#FFFFFF';
const MUTE_GRAY = '#6B7280';
const SUCCESS_COLOR = '#10B981'; // Teal/Green for completion

export default function CourseView() {
Â  const { id } = useParams();
Â  const token = useSelector(s => s.auth.token);
Â  const [progress, setProgress] = useState(null);
Â  const [loading, setLoading] = useState(true);
Â  const [error, setError] = useState(null);

Â  const fetchProgress = useCallback(async () => {
Â  Â  setLoading(true);
Â  Â  setError(null);
Â  Â  try {
Â  Â  Â  const data = await progressApi.getCourseProgress(id, token);
Â  Â  Â  setProgress(data);
Â  Â  } catch (err) {
Â  Â  Â  console.error('Error fetching progress:', err);
Â  Â  Â  setError(err.response?.data?.message || 'Failed to fetch course progress. Are you enrolled?');
Â  Â  } finally {
Â  Â  Â  setLoading(false);
Â  Â  }
Â  }, [id, token]);

Â  const completeModule = async (levelId, moduleId) => {
Â  Â  try {
Â  Â  Â  await progressApi.completeModule(id, levelId, moduleId, token);
Â  Â  Â  fetchProgress();
Â  Â  } catch (err) {
Â  Â  Â  alert(err.response?.data?.message || 'Error completing module.');
Â  Â  }
Â  };

Â  useEffect(() => {
Â  Â  fetchProgress();
Â  }, [fetchProgress]);

Â  if (loading) return <p>Loading...</p>;
Â  if (error) return <p style={{ color: 'red' }}>{error}</p>;
Â  if (!progress) return <p>No progress data found.</p>; 
Â  
Â  const courseLevels = progress.course.levels || [];
Â  
Â  let allPreviousLevelsCompleted = true; // State to track completion status

Â  return (
Â  Â  <div style={{ padding: '20px', backgroundColor: SOFT_BACKGROUND, minHeight: '100vh' }}>
Â  Â  Â  <h1 style={{ color: PRIMARY_COLOR, borderBottom: `2px solid ${SOFT_BORDER_COLOR}`, paddingBottom: 10 }}>
          {progress.course.title}
      </h1>
Â  Â  Â  <p style={{ color: MUTE_GRAY, marginBottom: 30 }}>{progress.course.description}</p>
Â  Â  Â  
Â  Â  Â  {progress.levels.map((levelProgress, levelIndex) => {
Â  Â  Â  Â  const courseLevel = courseLevels.find(l => String(l._id) === String(levelProgress.levelId));
Â  Â  Â  Â  
Â  Â  Â  Â  if (!courseLevel) return <p key={levelProgress.levelId} style={{ color: 'orange' }}>Level data missing for ID: {String(levelProgress.levelId)}</p>;
Â  Â  Â  Â  
Â  Â  Â  Â  const levelIsLocked = !allPreviousLevelsCompleted;
Â  Â  Â  Â  const allModulesCompletedInCurrentLevel = levelProgress.modules.every(mod => mod.completed);

Â  Â  Â  Â  if (!allModulesCompletedInCurrentLevel) {
Â  Â  Â  Â  Â  Â  allPreviousLevelsCompleted = false;
Â  Â  Â  Â  }

Â  Â  Â  Â  // --- LOCKED LEVEL RENDER ---
Â  Â  Â  Â  if (levelIsLocked) {
Â  Â  Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  Â  Â  Â  <div 
                    key={levelProgress.levelId} 
                    style={{ 
                        marginBottom: 24, 
                        padding: 20, 
                        border: `1px solid ${SOFT_BORDER_COLOR}`, 
                        borderRadius: 8, 
                        background: WHITE, 
                        opacity: 0.7, // Muted look
                        color: MUTE_GRAY,
                        boxShadow: '0 1px 3px rgba(0,0,0,0.05)'
                    }}
                >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3>{courseLevel.title} - Locked ðŸ”’</h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p style={{ margin: 0, fontSize: '0.9em' }}>Complete the previous level to unlock this content.</p>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  }

Â  Â  Â  Â  // --- UNLOCKED LEVEL RENDER ---
Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  <div 
                key={levelProgress.levelId} 
                style={{ 
                    marginBottom: 24, 
                    padding: 20, 
                    border: `1px solid ${SOFT_BORDER_COLOR}`, 
                    borderRadius: 8, 
                    background: WHITE, 
                    boxShadow: '0 1px 3px rgba(0,0,0,0.08)' 
                }}
            >
Â  Â  Â  Â  Â  Â  <h3 
                style={{ 
                    borderBottom: `2px solid ${SOFT_BORDER_COLOR}`, 
                    paddingBottom: 10, 
                    marginBottom: 20,
                    color: PRIMARY_COLOR // Level title in MongoDB color
                }}>
Â  Â  Â  Â  Â  Â  Â  Â  {courseLevel.title} 
Â  Â  Â  Â  Â  Â  Â  Â  {allModulesCompletedInCurrentLevel ? <span style={{ color: SUCCESS_COLOR, marginLeft: 8 }}>âœ…</span> : ''}
Â  Â  Â  Â  Â  Â  </h3>

Â  Â  Â  Â  Â  Â  {levelProgress.modules.map((modProgress, index) => {
Â  Â  Â  Â  Â  Â  Â  const moduleData = courseLevel.modules.find(m => String(m._id) === String(modProgress.moduleId));

Â  Â  Â  Â  Â  Â  Â  if (!moduleData) return <p key={modProgress.moduleId} style={{ color: 'orange' }}>Module data missing for ID: {String(modProgress.moduleId)}</p>;

Â  Â  Â  Â  Â  Â  Â  const completed = modProgress.completed;
Â  Â  Â  Â  Â  Â  Â  const locked = index > 0 && !levelProgress.modules[index - 1].completed;
Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  const moduleProps = {
Â  Â  Â  Â  Â  Â  Â  Â  module: moduleData,
Â  Â  Â  Â  Â  Â  Â  Â  completed: completed,
Â  Â  Â  Â  Â  Â  Â  Â  locked: locked,
Â  Â  Â  Â  Â  Â  Â  Â  onComplete: () => completeModule(levelProgress.levelId, modProgress.moduleId),
Â  Â  Â  Â  Â  Â  Â  Â  courseId: id,
Â  Â  Â  Â  Â  Â  Â  Â  levelId: levelProgress.levelId,
Â  Â  Â  Â  Â  Â  Â  Â  moduleId: modProgress.moduleId,
Â  Â  Â  Â  Â  Â  Â  };

Â  Â  Â  Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  Â  Â  Â  <div key={modProgress.moduleId} style={{ marginBottom: 16 }}>
                    {/* ModuleCard handles its own internal lock display */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  {moduleData.type !== 'coding' && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <ModuleCard {...moduleProps} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  Â  Â  Â  Â  {moduleData.type === 'coding' && !locked && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <CodingLinks {...moduleProps} content={moduleData.content} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
                    
                    {/* FIX: Move the locked coding module display to ModuleCard.js for consistency */}
                    {moduleData.type === 'coding' && locked && (
                        <ModuleCard {...moduleProps} />
                    )}

Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  Â  Â  })}
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  );
Â  Â  Â  })}
Â  Â  </div>
Â  );
}