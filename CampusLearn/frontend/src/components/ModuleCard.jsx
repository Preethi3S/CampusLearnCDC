import React, { useRef, useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import YouTube from 'react-youtube'; 
// import CodingLinks from '../components/CodingLinks'; 

// --- THEME CONSTANTS (Consistent across components) ---
const PRIMARY_COLOR = '#473E7A'; // MongoDB Purple (Dark color)
const SOFT_BORDER_COLOR = '#EBEBEB'; 
const MUTE_GRAY = '#6B7280'; // Dark gray (used for contrast background)
const SUCCESS_COLOR = '#10B981'; // Teal/Green for completion
const TEXT_ON_LIGHT_BACKGROUND = '#333333'; // Explicit dark text color for high contrast

export default function ModuleCard({ module, completed, locked, onComplete, courseId, levelId, onVideoEnd, isRestrictedVideo }) {
Â  
Â  Â  // --- STATE/REFS FOR VIDEO ENFORCEMENT ---
Â  Â  const playerRef = useRef(null); 
Â  Â  const lastValidTime = useRef(0); 
Â  Â  const intervalChecker = useRef(null);
Â  Â  const videoDuration = useRef(0); // Store total video duration
Â  Â  const [videoCompleted, setVideoCompleted] = useState(completed); 
Â  Â  
Â  Â  // --- NEW STATE FOR RESUME FUNCTIONALITY ---
Â  Â  // Stores the latest progress time saved in storage for this module
Â  Â  const [resumeTime, setResumeTime] = useState(0); 
Â  Â  
Â  Â  // Key used to store/retrieve progress in localStorage
Â  Â  const STORAGE_KEY = `module_progress_${module._id}`;

Â  Â  // Sync local state when external 'completed' prop changes 
Â  Â  useEffect(() => {
Â  Â  Â  Â  setVideoCompleted(completed);
Â  Â  }, [completed]);

Â  Â  // --- NEW: Load saved progress from localStorage on component mount ---
Â  Â  useEffect(() => {
Â  Â  Â  Â  if (isRestrictedVideo) {
Â  Â  Â  Â  Â  Â  const savedTime = localStorage.getItem(STORAGE_KEY);
Â  Â  Â  Â  Â  Â  if (savedTime && !completed) {
Â  Â  Â  Â  Â  Â  Â  Â  // Only set resume time if the video is not yet completed
Â  Â  Â  Â  Â  Â  Â  Â  setResumeTime(parseFloat(savedTime));
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  }, [module._id, isRestrictedVideo, completed, STORAGE_KEY]);


Â  Â  // --- UTILITY: Extract YouTube ID & Fallback URL ---
Â  Â  let youtubeId = null;
Â  Â  let fallbackUrl = '';
Â  Â  if (module.type === 'resource' && module.content && module.content.url) {
Â  Â  Â  Â  fallbackUrl = module.content.url;
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const url = new URL(module.content.url);
Â  Â  Â  Â  Â  Â  const vId = url.searchParams.get('v');
Â  Â  Â  Â  Â  Â  if (vId) {
Â  Â  Â  Â  Â  Â  Â  Â  youtubeId = vId;
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  } catch (e) {
Â  Â  Â  Â  Â  Â  // Ignore parsing error for non-youtube URLs
Â  Â  Â  Â  }
Â  Â  }
Â  Â  
Â  Â  // --- CORE LOGIC: FAST-FORWARD BLOCKER (STRICT RESET) ---
Â  Â  const startFFBlocker = (player) => {
Â  Â  Â  Â  if (intervalChecker.current) clearInterval(intervalChecker.current);
Â  Â  Â  Â  
Â  Â  Â  Â  intervalChecker.current = setInterval(() => {
Â  Â  Â  Â  Â  Â  const currentTime = player.getCurrentTime();
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  // NEW: Save progress every 5 seconds while playing (more efficient than every check)
Â  Â  Â  Â  Â  Â  if (Math.floor(currentTime) % 5 === 0 && currentTime > 0) {
Â  Â  Â  Â  Â  Â  Â  Â  Â localStorage.setItem(STORAGE_KEY, currentTime.toFixed(0));
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  // CHECK 1: Fast-Forward Detection (1.5s is buffer against stutter)
Â  Â  Â  Â  Â  Â  if (currentTime > lastValidTime.current + 1.5) { 
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  // ðŸ›‘ IMMEDIATE RESET: Jump video to 0:00
Â  Â  Â  Â  Â  Â  Â  Â  player.seekTo(0, true); 
Â  Â  Â  Â  Â  Â  Â  Â  player.pauseVideo();
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  // Reset the valid time checkpoint
Â  Â  Â  Â  Â  Â  Â  Â  lastValidTime.current = 0; 
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  console.log("Fast-forwarding detected. Video reset to 0:00.");

Â  Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Â  Â  // Update the checkpoint only if playback is progressing normally.
Â  Â  Â  Â  Â  Â  Â  Â  lastValidTime.current = currentTime; 
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }, 500); // Check every 500ms
Â  Â  };

Â  Â  const stopFFBlocker = () => {
Â  Â  Â  Â  if (intervalChecker.current) {
Â  Â  Â  Â  Â  Â  clearInterval(intervalChecker.current);
Â  Â  Â  Â  Â  Â  intervalChecker.current = null;
Â  Â  Â  Â  }
Â  Â  Â  Â  // FINAL SAVE on pause/stop (if not completed)
Â  Â  Â  Â  if (playerRef.current && !videoCompleted) {
Â  Â  Â  Â  Â  Â  const finalTime = playerRef.current.getCurrentTime();
Â  Â  Â  Â  Â  Â  localStorage.setItem(STORAGE_KEY, finalTime.toFixed(0));
Â  Â  Â  Â  Â  Â  console.log("Progress saved at:", finalTime.toFixed(0), "seconds.");
Â  Â  Â  Â  }
Â  Â  };
Â  Â  
Â  Â  const onPlayerReady = (event) => {
Â  Â  Â  Â  playerRef.current = event.target;
Â  Â  Â  Â  
Â  Â  Â  Â  // Get and store the video duration
Â  Â  Â  Â  videoDuration.current = event.target.getDuration();
Â  Â  Â  Â  
Â  Â  Â  Â  // --- RESUME LOGIC ---
Â  Â  Â  Â  // If there's saved time, seek to it, but only if the video isn't completed
Â  Â  Â  Â  if (resumeTime > 0 && !videoCompleted) {
Â  Â  Â  Â  Â  Â  event.target.seekTo(resumeTime, true);
Â  Â  Â  Â  Â  Â  lastValidTime.current = resumeTime; // Set checkpoint to resume time
Â  Â  Â  Â  Â  Â  console.log(`Resuming video from saved time: ${resumeTime} seconds.`);
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  // Set the initial checkpoint to 0 if starting fresh
Â  Â  Â  Â  Â  Â  lastValidTime.current = event.target.getCurrentTime();
Â  Â  Â  Â  }
Â  Â  };

Â  Â  const onPlayerStateChange = (event) => {
Â  Â  Â  Â  // State 1: Playing
Â  Â  Â  Â  if (event.data === 1 && isRestrictedVideo && !videoCompleted) {
Â  Â  Â  Â  Â  Â  startFFBlocker(event.target);
Â  Â  Â  Â  } 
Â  Â  Â  Â  // State 2: Paused, State 0: Ended
Â  Â  Â  Â  else if (event.data === 2 || event.data === 0) {
Â  Â  Â  Â  Â  Â  stopFFBlocker();
Â  Â  Â  Â  }
Â  Â  };
Â  Â  
Â  Â  // --- CORE LOGIC: AUTO-COMPLETION (COMPLETION GATE) ---
Â  Â  const handleVideoEnd = () => {
Â  Â  Â  Â  stopFFBlocker();
Â  Â  Â  Â  
Â  Â  Â  Â  // CRITICAL CHECK: Completion Gate
Â  Â  Â  Â  // User must have watched up to the final 5 seconds (configurable buffer)
Â  Â  Â  Â  const completionGate = videoDuration.current - 5; 
Â  Â  Â  Â  
Â  Â  Â  Â  if (lastValidTime.current < completionGate) {
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  // Cheating detected: user jumped near the end to trigger onEnd without continuous watch time.
Â  Â  Â  Â  Â  Â  if (playerRef.current) {
Â  Â  Â  Â  Â  Â  Â  Â  playerRef.current.seekTo(0, true);
Â  Â  Â  Â  Â  Â  Â  Â  playerRef.current.pauseVideo();
Â  Â  Â  Â  Â  Â  Â  Â  lastValidTime.current = 0;
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  console.log("Completion attempt failed. Insufficient continuous watch time. Video reset.");
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  return; // EXIT: Do NOT mark as complete.
Â  Â  Â  Â  }

Â  Â  Â  Â  // If the gate is passed, mark as complete
Â  Â  Â  Â  if (!videoCompleted) {
Â  Â  Â  Â  Â  Â  setVideoCompleted(true); 
Â  Â  Â  Â  Â  Â  onVideoEnd(); 
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  // --- Remove progress on successful completion ---
Â  Â  Â  Â  Â  Â  localStorage.removeItem(STORAGE_KEY);
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  console.log("Module completed automatically.");
Â  Â  Â  Â  }
Â  Â  };

Â  Â  // Cleanup on unmount
Â  Â  useEffect(() => {
Â  Â  Â  Â  // Stop checker and save final progress when component is unmounted (e.g., navigating away)
Â  Â  Â  Â  return () => {
Â  Â  Â  Â  Â  Â  Â stopFFBlocker();
Â  Â  Â  Â  Â  Â  Â // The final save logic is now inside stopFFBlocker, which runs on cleanup
Â  Â  Â  Â  }; 
Â  Â  }, [videoCompleted, STORAGE_KEY]);


Â  Â  // --- 1. LOCKED MODULE (No Change) ---
Â  Â  if (locked) {
Â  Â  Â  return (
Â  Â  Â  Â  <div style={{ /* ... styles ... */ }}>
Â  Â  Â  Â  <strong>{module.title}</strong> ({module.type}) - Locked ðŸ”’
Â  Â  Â  </div>
Â  Â  );
Â  }
Â  Â  
Â  Â  // --- 2. RESUME PLAYBACK BUTTON (NEW UI) ---
Â  Â  const handleStartFromScratch = () => {
Â  Â  Â  Â  localStorage.removeItem(STORAGE_KEY);
Â  Â  Â  Â  setResumeTime(0); // Clear local state, component will re-render or video will reload from 0
Â  Â  Â  Â  
Â  Â  Â  Â  if (playerRef.current) {
Â  Â  Â  Â  Â  Â  playerRef.current.seekTo(0, true);
Â  Â  Â  Â  Â  Â  playerRef.current.playVideo();
Â  Â  Â  Â  }
Â  Â  Â  Â  console.log("User chose to start from scratch.");
Â  Â  };

Â  const commonCardStyle = {
Â  Â  Â  Â  padding: 15, 
Â  Â  Â  Â  border: `1px solid ${SOFT_BORDER_COLOR}`, 
Â  Â  Â  Â  borderRadius: 8, 
Â  Â  Â  Â  marginBottom: 12,
Â  Â  Â  Â  background: 'white',
Â  Â  Â  Â  boxShadow: '0 1px 3px rgba(0,0,0,0.06)',
Â  Â  Â  Â  borderLeft: videoCompleted ? `4px solid ${SUCCESS_COLOR}` : `4px solid ${PRIMARY_COLOR}20` 
Â  Â  };

Â  switch (module.type) {
Â  Â  case 'resource': 
Â  Â  Â  return (
Â  Â  Â  Â  <div style={commonCardStyle}>
Â  Â  Â  Â  Â  <strong style={{ color: PRIMARY_COLOR }}>{module.title}</strong> ({module.type})
Â  Â  Â  Â  Â  <div style={{ marginTop: 12, marginBottom: 8, overflow: 'hidden' }}>
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  {/* --- RESTRICTED YOUTUBE PLAYER --- */}
Â  Â  Â  Â  Â  Â  {isRestrictedVideo && youtubeId ? (
Â  Â  Â  Â  Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* NEW: Display Resume/Start Over options */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {resumeTime > 0 && !videoCompleted && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <div style={{ 
                                padding: '10px 15px', 
                                border: `1px dashed ${PRIMARY_COLOR}`,
                                backgroundColor: '#F0F0F0', /* Light background for the banner */
                                marginBottom: 15 
                            }}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p style={{ 
                                margin: 0, 
                                fontWeight: 'bold',
                                color: TEXT_ON_LIGHT_BACKGROUND /* Ensure high contrast text */
                            }}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Resume from {Math.floor(resumeTime / 60)}m {Math.floor(resumeTime % 60)}s?
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={handleStartFromScratch}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  marginTop: 10,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  padding: '6px 12px',
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  border: 'none',
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  background: MUTE_GRAY,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  color: '#fff', /* White text on dark gray MUTE_GRAY for high contrast */
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  borderRadius: 4,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  cursor: 'pointer'
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Start from Scratch
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <YouTube
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  videoId={youtubeId}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  opts={{
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  height: '315',
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  width: '100%',
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  playerVars: {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  // controls: videoCompleted ? 1 : 0, // Optionally hide controls if not completed
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  start: resumeTime > 0 && !videoCompleted ? resumeTime : 0 // Set start time if resumeTime is available
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onReady={onPlayerReady}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onStateChange={onPlayerStateChange}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onEnd={handleVideoEnd} // ðŸ‘ˆ Auto-completion trigger
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  </>
Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  /* --- FALLBACK/NON-RESTRICTED RESOURCE --- */
Â  Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <iframe
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  src={fallbackUrl}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  width="100%" 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  height="315"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  frameBorder="0"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  allowFullScreen
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  style={{ maxWidth: 560 }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ></iframe>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {!youtubeId && fallbackUrl && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p style={{marginTop: 10}}>View resource: <a href={fallbackUrl} target="_blank" rel="noopener noreferrer">Link</a></p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {!fallbackUrl && <p style={{ color: 'red' }}>Resource URL not found or invalid.</p>}
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  {/* The Mark as Completed button is ONLY shown for non-restricted resources */}
Â  Â  Â  Â  Â  {!videoCompleted && !isRestrictedVideo ? (
Â  Â  Â  Â  Â  Â  <button 
Â  Â  Â  Â  Â  Â  Â  Â  onClick={onComplete} 
Â  Â  Â  Â  Â  Â  Â  Â  style={{ 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  marginTop: 8, 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  background: PRIMARY_COLOR, 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  color: '#fff', 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  padding: '8px 16px',
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  borderRadius: 4,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  border: 'none',
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  fontWeight: 'bold'
Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Mark as Completed (Manual)
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  ) : null}
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  {/* Completion status display */}
Â  Â  Â  Â  Â  Â  {videoCompleted && <p style={{ color: SUCCESS_COLOR, fontWeight: 'bold' }}>Completed âœ…</p>}

Â  Â  Â  Â  </div>
Â  Â  Â  );

Â  Â  case 'quiz': 
Â  Â  Â  return (
Â  Â  Â  Â  <div style={commonCardStyle}>
Â  Â  Â  Â  Â  <strong style={{ color: PRIMARY_COLOR }}>{module.title}</strong> ({module.type})
Â  Â  Â  Â  Â  {!videoCompleted && !locked ? (
Â  Â  Â  Â  Â  Â  <Link
Â  Â  Â  Â  Â  Â  Â  to={`/student/course/${courseId}/level/${levelId}/module/${module._id}/quiz`}
Â  Â  Â  Â  Â  Â  Â  style={{ 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  display: 'inline-block', 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  marginTop: 10, 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  background: PRIMARY_COLOR, 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  color: '#fff', 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  padding: '8px 16px', 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  textDecoration: 'none',
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  borderRadius: 4,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  border: 'none',
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  fontWeight: 'bold'
Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Start Quiz
Â  Â  Â  Â  Â  Â  </Link>
Â  Â  Â  Â  Â  ) : null}
Â  Â  Â  Â  Â  {videoCompleted && <p style={{ color: SUCCESS_COLOR, fontWeight: 'bold' }}>Completed âœ…</p>}
Â  Â  Â  Â  Â  {locked && <p style={{ color: MUTE_GRAY }}>This module is locked until previous module is completed.</p>}
Â  Â  Â  Â  </div>
Â  Â  Â  );

Â  Â  case 'coding': 
Â  Â  Â  return (
Â  Â  Â  Â  <div style={commonCardStyle}>
Â  Â  Â  Â  Â  <strong style={{ color: PRIMARY_COLOR }}>{module.title}</strong> ({module.type})
Â  Â  Â  Â  Â  Â  <hr style={{ margin: '8px 0', borderTop: `1px solid ${SOFT_BORDER_COLOR}` }}/>
Â  Â  Â  Â  Â  <CodingLinks 
Â  Â  Â  Â  Â  Â  Â  Â  courseId={courseId}
Â  Â  Â  Â  Â  Â  Â  Â  levelId={levelId}
Â  Â  Â  Â  Â  Â  Â  Â  moduleId={module._id}
Â  Â  Â  Â  Â  Â  Â  Â  content={module.content}
Â  Â  Â  Â  Â  Â  Â  Â  completed={videoCompleted} 
Â  Â  Â  Â  Â  Â  Â  Â  onComplete={onComplete} 
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  </div>
Â  Â  Â  );

Â  Â  default:
Â  Â  Â  return null;
Â  }
}