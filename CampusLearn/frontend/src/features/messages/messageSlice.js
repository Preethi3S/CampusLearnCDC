import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import messageApi from '../../api/messageApi';

// --- Async actions ---
export const fetchMessages = createAsyncThunk('messages/fetchAll', async (token, thunkAPI) => {
Â  try {
Â  Â  return await messageApi.getAllMessages(token);
Â  } catch (err) {
Â  Â  return thunkAPI.rejectWithValue(err.response?.data?.message || 'Failed to fetch messages');
Â  }
});

export const createMessage = createAsyncThunk('messages/create', async ({ data, token }, thunkAPI) => {
Â  try {
Â  Â  return await messageApi.createMessage(data, token);
Â  } catch (err) {
Â  Â  return thunkAPI.rejectWithValue(err.response?.data?.message || 'Failed to create message');
Â  }
});

export const updateMessage = createAsyncThunk('messages/update', async ({ id, data, token }, thunkAPI) => {
Â  try {
Â  Â  return await messageApi.updateMessage(id, data, token);
Â  } catch (err) {
Â  Â  return thunkAPI.rejectWithValue(err.response?.data?.message || 'Failed to update message');
Â  }
});

export const deleteMessage = createAsyncThunk('messages/delete', async ({ id, token }, thunkAPI) => {
Â  try {
Â  Â  await messageApi.deleteMessage(id, token);
Â  Â  return id;
Â  } catch (err) {
Â  Â  return thunkAPI.rejectWithValue(err.response?.data?.message || 'Failed to delete message');
Â  }
});

export const addReply = createAsyncThunk('messages/addReply', async ({ id, replyData, token }, thunkAPI) => {
Â  try {
Â  Â  return await messageApi.addReply(id, replyData, token); 
Â  } catch (err) {
Â  Â  return thunkAPI.rejectWithValue(err.response?.data?.message || 'Failed to add reply');
Â  }
});

export const addThumb = createAsyncThunk('messages/addThumb', async ({ id, token }, thunkAPI) => {
Â  try {
Â  Â  return await messageApi.addThumb(id, token); 
Â  } catch (err) {
Â  Â  return thunkAPI.rejectWithValue(err.response?.data?.message || 'Failed to add thumbs-up');
Â  }
});

// --- Slice ---
const messageSlice = createSlice({
Â  name: 'messages',
Â  initialState: {
Â  Â  items: [],
Â  Â  loading: false,
Â  Â  error: null,
Â  },
Â  reducers: {},
Â  extraReducers: (builder) => {
Â  Â  builder
Â  Â  Â  // Fetch messages
Â  Â  Â  .addCase(fetchMessages.pending, (state) => {
Â  Â  Â  Â  state.loading = true;
Â  Â  Â  })
Â  Â  Â  .addCase(fetchMessages.fulfilled, (state, action) => {
Â  Â  Â  Â  state.loading = false;
        // ðŸš¨ FIX: Explicitly check if the payload is an array
Â  Â  Â  Â  state.items = Array.isArray(action.payload) ? action.payload : [];
Â  Â  Â  })
Â  Â  Â  .addCase(fetchMessages.rejected, (state, action) => {
Â  Â  Â  Â  state.loading = false;
Â  Â  Â  Â  state.error = action.payload;
        // Reset items to empty array on rejection
        state.items = []; 
Â  Â  Â  })
Â  Â  Â  // Create
Â  Â  Â  .addCase(createMessage.fulfilled, (state, action) => {
Â  Â  Â  Â  state.items.unshift(action.payload);
Â  Â  Â  })
Â  Â  Â  // Update / Add Reply / Add Thumb: All receive the full updated message object
Â  Â  Â  .addCase(updateMessage.fulfilled, (state, action) => {
Â  Â  Â  Â  const index = state.items.findIndex((m) => m._id === action.payload._id);
Â  Â  Â  Â  if (index !== -1) state.items[index] = action.payload;
Â  Â  Â  })
Â  Â  Â  .addCase(addReply.fulfilled, (state, action) => {
Â  Â  Â  Â  const index = state.items.findIndex((m) => m._id === action.payload._id);
Â  Â  Â  Â  if (index !== -1) state.items[index] = action.payload;
Â  Â  Â  })
Â  Â  Â  .addCase(addThumb.fulfilled, (state, action) => {
Â  Â  Â  Â  const index = state.items.findIndex((m) => m._id === action.payload._id);
Â  Â  Â  Â  if (index !== -1) state.items[index] = action.payload;
Â  Â  Â  })
Â  Â  Â  // Delete
Â  Â  Â  .addCase(deleteMessage.fulfilled, (state, action) => {
Â  Â  Â  Â  state.items = state.items.filter((m) => m._id !== action.payload);
Â  Â  Â  });
Â  },
});

export default messageSlice.reducer;